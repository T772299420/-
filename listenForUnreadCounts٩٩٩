<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>💬 ChatPro - دردشة فورية</title>
  <link rel="manifest" href="data:application/json;base64,ewibmFtZSI6ImNoYXRwcm8iLCJzaG9ydF9uYW1lIjoiY2hhdHBybyIsInN0YXJ0X3VybCI6Ii9pbmRleC5odG1sIiwiZGlzcGxheSI6InN0YW5kYWxvbmUiLCJiYWNrZ3JvdW5kX2NvbG9yIjoiIzY4Nzk5NSIsInRoZW1lX2NvbG9yIjoiIzY4Nzk5NSIsInByZWZlcnJlZF9kaXNwbGF5X21vZGUiOiJzdGFuZGFsb25lIiwiaWNvbnMiOlt7InNyYyI6Imh0dHBzOi8vd3d3LmZhYmVsLnBhaW50L2ljb24vMjU2eDI1Ni9jaGF0cHJvLnBuZyIsInNpemVzIjoiMjU2eDI1NiIsInR5cGUiOiJpbWFnZS9wbmciLCJwdXJwb3NlcyI6ImFueSBtYXNrYWJsZSJ9XX0=">
  <style>
    /* جعل الصفحة تملأ الشاشة بالكامل */
    html, body {
      height: 100%;
      margin: 0;
      padding: 0;
      overflow: hidden; /* لمنع ظهور شريط التمرير الرئيسي */
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      direction: rtl;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    /* إخفاء الواجهتين بشكل افتراضي */
    #authContainer, #app {
      display: none;
    }

    /* شاشة تسجيل الدخول */
    #authContainer {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: white;
      padding: 40px;
      border-radius: 20px;
      box-shadow: 0 20px 40px rgba(0,0,0,0.15);
      width: min(400px, 90vw);
      z-index: 1000;
    }

    #authContainer h2 {
      text-align: center;
      margin-bottom: 30px;
      color: #6a11cb;
      font-size: 28px;
      font-weight: bold;
    }

    input, button, textarea {
      width: 100%;
      padding: 15px;
      margin: 10px 0;
      border: 2px solid #e0e0e0;
      border-radius: 12px;
      font-size: 16px;
      transition: all 0.3s ease;
      font-family: inherit;
    }

    input:focus, textarea:focus {
      border-color: #6a11cb;
      outline: none;
      box-shadow: 0 0 0 3px rgba(106, 17, 203, 0.1);
    }

    button {
      background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
      color: white;
      border: none;
      cursor: pointer;
      font-weight: bold;
      transition: transform 0.2s, box-shadow 0.2s;
    }

    button:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 25px rgba(106, 17, 203, 0.3);
    }

    button:active {
      transform: translateY(0);
    }

    #toggleFormBtn {
      background: transparent;
      color: #6a11cb;
      border: 2px solid #6a11cb;
    }

    #toggleFormBtn:hover {
      background: #6a11cb;
      color: white;
    }

    #errorMsg {
      color: #e74c3c;
      text-align: center;
      min-height: 20px;
      font-weight: bold;
      font-size: 14px;
    }

    /* التطبيق الرئيسي */
    #app {
      display: flex;
      flex-direction: column;
      height: 100%; /* اجعل التطبيق يملأ الـ body */
      background: white;
    }

    /* شريط التطبيق العلوي */
    #appHeader {
      background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
      color: white;
      padding: 15px 25px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      box-shadow: 0 4px 20px rgba(0,0,0,0.1);
      position: relative;
      z-index: 100;
    }

    #appLogoContainer {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 5px;
    }

    #appLogo {
      display: flex;
      align-items: center;
      gap: 12px;
      font-size: 26px;
      font-weight: bold;
      text-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }

    #appLogo::before {
      content: "💬";
      font-size: 32px;
      filter: drop-shadow(0 2px 4px rgba(0,0,0,0.3));
    }

    #usersCount {
        font-size: 12px;
        opacity: 0.8;
        font-weight: normal;
    }

    #userInfo {
      display: flex;
      align-items: center;
      gap: 15px;
    }

    #userAvatar {
      width: 45px;
      height: 45px;
      border-radius: 50%;
      border: 3px solid rgba(255,255,255,0.3);
      object-fit: cover;
    }

    #userDetails {
      display: flex;
      flex-direction: column;
      align-items: flex-end;
    }

    #currentUsername {
      font-weight: bold;
      font-size: 16px;
    }

    #currentUserStatus {
      font-size: 12px;
      opacity: 0.8;
    }

    #menuBtn {
      background: rgba(255,255,255,0.2);
      border: none;
      color: white;
      padding: 12px;
      border-radius: 12px;
      cursor: pointer;
      font-size: 20px;
      transition: background 0.3s;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    #menuBtn:hover {
      background: rgba(255,255,255,0.3);
    }

    /* أيقونة الخطوط الثلاثة */
    #menuBtn span {
      font-size: 24px;
      font-weight: bold;
      line-height: 1;
    }

    /* المحتوى الرئيسي */
    #mainContent {
      display: flex;
      flex: 1; /* اجعل المحتوى يملأ المساحة المتبقية */
      position: relative;
    }

    /* قائمة المستخدمين */
    #usersListContainer {
      width: 100%;
      background: #f8f9fa;
      border-left: 1px solid #e9ecef;
      display: flex;
      flex-direction: column;
      position: absolute;
      top: 0;
      left: 0;
      height: 100%;
      z-index: 150;
      transition: transform 0.3s ease;
    }

    #usersListContainer.hidden {
      transform: translateX(100%);
    }

    #searchContainer {
      padding: 20px;
      background: white;
      border-bottom: 1px solid #e9ecef;
    }

    #searchInput {
      width: 100%;
      padding: 12px 20px;
      border: 2px solid #e9ecef;
      border-radius: 25px;
      font-size: 16px;
      background: #f8f9fa;
      margin: 0;
    }

    #searchInput:focus {
      background: white;
      border-color: #6a11cb;
    }

    #usersList {
      flex: 1;
      overflow-y: auto;
      padding: 10px;
    }

    .user-card {
      background: white;
      border-radius: 15px;
      padding: 15px;
      margin: 8px 0;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 2px 10px rgba(0,0,0,0.05);
      display: flex;
      align-items: center;
      gap: 15px;
      position: relative;
      border: 2px solid transparent;
    }

    .user-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(0,0,0,0.1);
      border-color: #6a11cb;
    }

    .user-card.active {
      background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
      color: white;
    }

    .user-card.blocked {
      opacity: 0.5;
      background: #ffebee;
    }

    .user-avatar-container {
      position: relative;
    }

    .user-avatar {
      width: 55px;
      height: 55px;
      border-radius: 50%;
      object-fit: cover;
      border: 3px solid transparent;
    }

    .user-card.active .user-avatar {
      border-color: white;
    }

    .online-indicator {
      position: absolute;
      bottom: 2px;
      right: 2px;
      width: 16px;
      height: 16px;
      background: #28a745;
      border: 3px solid white;
      border-radius: 50%;
      display: none;
      box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }

    .online-indicator.online {
      display: block;
      animation: pulse 2s infinite;
    }

    @keyframes pulse {
      0% { box-shadow: 0 0 0 0 rgba(40, 167, 69, 0.7); }
      70% { box-shadow: 0 0 0 10px rgba(40, 167, 69, 0); }
      100% { box-shadow: 0 0 0 0 rgba(40, 167, 69, 0); }
    }

    .user-info {
      flex: 1;
      display: flex;
      flex-direction: column;
      gap: 4px;
    }

    .user-info h4 {
      margin: 0;
      font-size: 16px;
      font-weight: bold;
    }

    .user-status {
      font-size: 14px;
      opacity: 0.7;
    }

    .last-seen {
      font-size: 12px;
      opacity: 0.6;
      font-style: italic;
    }

    .unread-count {
      position: absolute;
      top: 8px;
      left: 8px;
      background: #e74c3c;
      color: white;
      border-radius: 50%;
      width: 24px;
      height: 24px;
      display: none;
      align-items: center;
      justify-content: center;
      font-size: 12px;
      font-weight: bold;
      box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }

    .unread-count.show {
      display: flex;
    }

    /* شارة المستخدم الجديد */
    .new-user-badge {
        background-color: #e74c3c;
        color: white;
        border-radius: 8px;
        padding: 2px 8px;
        font-size: 10px;
        font-weight: bold;
        margin-right: 5px;
        display: inline-block;
        vertical-align: middle;
    }

    .new-user-text {
        color: #e74c3c;
    }
    
    /* شاشة المحادثة */
    #chatContainer {
      flex: 1;
      display: none;
      flex-direction: column;
      background: white;
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 200;
    }

    #chatContainer.fullscreen {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 200;
    }

    #chatHeader {
      background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
      color: white;
      padding: 20px 25px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      box-shadow: 0 4px 20px rgba(0,0,0,0.1);
    }

    #chatUserInfo {
      display: flex;
      align-items: center;
      gap: 15px;
    }

    #chatUserAvatar {
      width: 50px;
      height: 50px;
      border-radius: 50%;
      border: 3px solid rgba(255,255,255,0.3);
      object-fit: cover;
    }

    #chatUserDetails {
      display: flex;
      flex-direction: column;
      gap: 2px;
    }

    #chatUserName {
      font-size: 20px;
      font-weight: bold;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    #chatUserStatus {
      font-size: 14px;
      opacity: 0.8;
    }

    #chatControls {
      display: flex;
      gap: 10px;
    }

    .chat-btn {
      background: rgba(255,255,255,0.2);
      border: none;
      color: white;
      padding: 10px 12px;
      border-radius: 10px;
      cursor: pointer;
      font-size: 16px;
      transition: background 0.3s;
    }

    .chat-btn:hover {
      background: rgba(255,255,255,0.3);
    }

    /* منطقة الرسائل */
    #messagesArea {
      flex: 1;
      overflow-y: auto;
      padding: 20px;
      background: linear-gradient(to bottom, #f8f9fa, #e9ecef);
      display: flex;
      flex-direction: column;
      gap: 15px;
    }

    .message-wrapper {
      display: flex;
      position: relative;
    }

    .message-wrapper.sent {
      justify-content: flex-end;
    }

    .message-wrapper.received {
      justify-content: flex-start;
    }

    .message {
      max-width: 70%;
      padding: 15px 20px;
      border-radius: 20px;
      position: relative;
      word-wrap: break-word;
      box-shadow: 0 4px 15px rgba(0,0,0,0.1);
      animation: messageSlide 0.3s ease;
    }

    @keyframes messageSlide {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .message.sent {
      background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
      color: white;
      border-bottom-right-radius: 5px;
    }

    .message.received {
      background: white;
      color: #333;
      border: 1px solid #e9ecef;
      border-bottom-left-radius: 5px;
    }

    .message-content {
      margin-bottom: 8px;
      line-height: 1.4;
    }

    .message-media {
      border-radius: 15px;
      overflow: hidden;
      position: relative;
      margin-bottom: 10px;
      background: #000;
    }

    .message-media img,
    .message-media video {
      width: 100%;
      max-width: 300px;
      height: auto;
      border-radius: 15px;
      cursor: pointer;
      transition: transform 0.2s;
    }

    .message-media img:hover,
    .message-media video:hover {
      transform: scale(1.02);
    }

    .media-loading {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(0,0,0,0.8);
      color: white;
      padding: 15px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .loading-spinner {
      width: 30px;
      height: 30px;
      border: 3px solid rgba(255,255,255,0.3);
      border-top: 3px solid white;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .message-time {
      font-size: 11px;
      opacity: 0.7;
      text-align: left;
      direction: ltr;
    }

    .message-options {
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      display: none;
      flex-direction: column;
      gap: 5px;
    }

    .message-wrapper.sent .message-options {
      left: -40px;
    }

    .message-wrapper.received .message-options {
      right: -40px;
    }

    .message-wrapper:hover .message-options {
      display: flex;
    }

    .message-option {
      background: rgba(0,0,0,0.7);
      color: white;
      border: none;
      padding: 8px;
      border-radius: 50%;
      cursor: pointer;
      font-size: 14px;
      width: 32px;
      height: 32px;
      transition: background 0.3s;
    }

    .message-option:hover {
      background: rgba(0,0,0,0.9);
    }

    /* منطقة الإدخال */
    #inputContainer {
      background: white;
      padding: 20px 25px;
      border-top: 1px solid #e9ecef;
      display: flex;
      align-items: flex-end;
      gap: 15px;
      box-shadow: 0 -2px 10px rgba(0,0,0,0.05);
    }

    #mediaButtons {
      display: flex;
      gap: 8px;
    }
    
    /* تصميم الأزرار الجديدة */
    .media-btn {
      background: #f8f9fa;
      color: #6a11cb;
      border: 2px solid #e9ecef;
      padding: 8px; /* أصغر */
      border-radius: 12px;
      cursor: pointer;
      font-size: 18px; /* أصغر قليلاً */
      transition: all 0.3s;
      width: 40px; /* أصغر */
      height: 40px; /* أصغر */
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .media-btn:hover {
      background: #6a11cb;
      color: white;
      border-color: #6a11cb;
    }

    #messageInput {
      flex: 1;
      resize: none;
      min-height: 40px;
      max-height: 120px;
      padding: 12px 20px;
      border: 2px solid #e9ecef;
      border-radius: 25px;
      font-size: 16px;
      line-height: 1.4;
      margin: 0;
    }
    
    /* تصميم زر الإرسال الجديد */
    #sendBtn {
      background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
      color: white;
      border: none;
      padding: 12px; /* أصغر */
      border-radius: 50%; /* دائري */
      cursor: pointer;
      font-size: 20px;
      font-weight: bold;
      transition: transform 0.2s;
      margin: 0;
      width: 48px; /* حجم ثابت */
      height: 48px; /* حجم ثابت */
      display: flex;
      align-items: center;
      justify-content: center;
    }

    #sendBtn:hover {
      transform: scale(1.05);
    }

    /* معاينة الوسائط */
    #mediaPreview {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.9);
      display: none;
      justify-content: center;
      align-items: center;
      z-index: 3000;
      backdrop-filter: blur(10px);
    }

    #mediaPreview .preview-content {
      max-width: 90%;
      max-height: 90%;
      position: relative;
    }

    #mediaPreview img,
    #mediaPreview video {
      max-width: 100%;
      max-height: 100%;
      border-radius: 15px;
      box-shadow: 0 20px 40px rgba(0,0,0,0.5);
    }

    .preview-controls {
      position: absolute;
      bottom: -80px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      gap: 15px;
    }

    .preview-btn {
      background: rgba(255,255,255,0.2);
      border: none;
      color: white;
      padding: 15px 25px;
      border-radius: 25px;
      cursor: pointer;
      font-size: 16px;
      font-weight: bold;
      backdrop-filter: blur(10px);
      transition: background 0.3s;
    }

    .preview-btn:hover {
      background: rgba(255,255,255,0.3);
    }

    .preview-btn.send {
      background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
    }

    /* القوائم المنسدلة */
    #dropdownMenu {
      position: absolute;
      top: 75px;
      right: 25px;
      background: white;
      border-radius: 15px;
      box-shadow: 0 15px 35px rgba(0,0,0,0.2);
      display: none;
      flex-direction: column;
      min-width: 220px;
      z-index: 300;
      overflow: hidden;
      border: 1px solid #e9ecef;
    }

    .dropdown-item {
      padding: 15px 20px;
      border: none;
      background: transparent;
      text-align: right;
      cursor: pointer;
      font-size: 16px;
      font-weight: 500;
      transition: background 0.3s;
      display: flex;
      align-items: center;
      gap: 12px;
      justify-content: flex-start;
      color: #333;
    }

    .dropdown-item:hover {
      background: #f8f9fa;
    }

    .dropdown-item.danger {
      color: #e74c3c;
    }

    .dropdown-item.danger:hover {
      background: #ffebee;
    }
    
    .dropdown-item img {
      width: 24px;
      height: 24px;
    }
    
    /* المودال */
    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.5);
      justify-content: center;
      align-items: center;
      z-index: 4000;
      backdrop-filter: blur(5px);
    }

    .modal-content {
      background: white;
      border-radius: 20px;
      padding: 30px;
      width: min(400px, 90vw);
      position: relative;
      box-shadow: 0 20px 40px rgba(0,0,0,0.2);
      animation: modalSlide 0.3s ease;
    }

    @keyframes modalSlide {
      from {
        opacity: 0;
        transform: scale(0.9) translateY(-20px);
      }
      to {
        opacity: 1;
        transform: scale(1) translateY(0);
      }
    }
    
    .modal h3 {
      margin-bottom: 20px;
      text-align: center;
      color: #333;
      font-size: 24px;
    }

    .modal-buttons {
      display: flex;
      gap: 15px;
      justify-content: center;
      margin-top: 25px;
    }

    .modal-buttons button {
      padding: 12px 25px;
      border: none;
      border-radius: 12px;
      cursor: pointer;
      font-size: 16px;
      font-weight: bold;
      transition: all 0.3s;
    }

    .modal-buttons .primary {
      background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
      color: white;
    }

    .modal-buttons .secondary {
      background: #f8f9fa;
      color: #6a11cb;
      border: 2px solid #e9ecef;
    }

    /* حالة الكتابة */
    #typingIndicator {
      padding: 10px 25px;
      color: #6a11cb;
      font-style: italic;
      font-size: 14px;
      background: rgba(106, 17, 203, 0.05);
      display: none;
    }

    .typing-dots {
      display: inline-block;
    }

    .typing-dots::after {
      content: '';
      animation: typing 1.5s infinite;
    }

    @keyframes typing {
      0%, 60%, 100% { content: ''; }
      30% { content: '.'; }
      60% { content: '..'; }
      90% { content: '...'; }
    }

    /* تحسينات الجوال */
    @media (max-width: 768px) {
      #appHeader {
        padding: 12px 15px;
      }

      #appLogo {
        font-size: 22px;
      }

      #appLogo::before {
        font-size: 28px;
      }

      #usersListContainer {
        transform: translateX(0);
        position: relative;
      }

      #chatContainer {
        width: 100%;
      }

      .message {
        max-width: 85%;
      }

      #inputContainer {
        padding: 15px;
      }

      #mediaButtons {
        flex-direction: column;
      }

      .user-card {
        padding: 12px;
      }

      .user-avatar {
        width: 50px;
        height: 50px;
      }
      
      #dropdownMenu {
        right: 15px;
        top: 70px;
      }
    }

    /* تحسينات إضافية */
    .fade-in {
      animation: fadeIn 0.5s ease-in;
    }

    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }

    .slide-up {
      animation: slideUp 0.3s ease-out;
    }

    @keyframes slideUp {
      from { transform: translateY(30px); opacity: 0; }
      to { transform: translateY(0); opacity: 1; }
    }

    /* شريط التمرير المخصص */
    ::-webkit-scrollbar {
      width: 8px;
    }

    ::-webkit-scrollbar-track {
      background: #f1f1f1;
      border-radius: 10px;
    }

    ::-webkit-scrollbar-thumb {
      background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
      border-radius: 10px;
    }

    ::-webkit-scrollbar-thumb:hover {
      background: linear-gradient(135deg, #2575fc 0%, #6a11cb 100%);
    }

    /* إخفاء ملفات الإدخال */
    input[type="file"] {
      display: none;
    }

    /* رسالة ترحيب */
    .welcome-message {
      text-align: center;
      padding: 50px 20px;
      color: #666;
      font-size: 18px;
    }

    .welcome-message h3 {
      color: #6a11cb;
      margin-bottom: 15px;
      font-size: 24px;
    }

    /* حالة فارغة */
    .empty-state {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100%;
      color: #666;
      font-size: 16px;
    }

    .empty-state .icon {
      font-size: 48px;
      margin-bottom: 15px;
      opacity: 0.5;
    }

    /* تنسيق إشعار الترحيب */
    .welcome-content {
      text-align: right;
      line-height: 1.8;
      font-size: 16px;
      color: #555;
    }

    .cute-chat-name {
      font-weight: bold;
      color: #e74c3c;
    }
  </style>
</head>
<body>

<div id="authContainer">
  <h2 id="formTitle">💬 مرحباً بك في ChatPro</h2>
  <input type="email" id="email" placeholder="📧 البريد الإلكتروني" />
  <input type="password" id="password" placeholder="🔒 كلمة المرور" />
  <input type="text" id="username" placeholder="👤 الاسم" style="display: none;" />
  <input type="text" id="status" placeholder="✨ الحالة (اختياري)" style="display: none;" />
  <div id="errorMsg"></div>
  <button id="submitBtn">تسجيل الدخول</button>
  <button id="toggleFormBtn">إنشاء حساب جديد</button>
</div>

<div id="app">
  <div id="appHeader">
    <div id="userInfo">
      <button id="menuBtn">☰</button>
      <img id="userAvatar" src="" alt="Avatar" />
      <div id="userDetails">
        <div id="currentUsername"></div>
        <div id="currentUserStatus"></div>
      </div>
    </div>
    <div id="appLogoContainer">
      <div id="appLogo">ChatPro</div>
      <div id="usersCount"></div>
    </div>
  </div>

  <div id="mainContent">
    <div id="usersListContainer">
      <div id="searchContainer">
        <input type="text" id="searchInput" placeholder="🔍 ابحث عن مستخدم..." />
      </div>
      <div id="usersList">
        <div class="welcome-message">
          <h3>🎉 مرحباً بك!</h3>
          <p>ابدأ محادثة جديدة مع أصدقائك</p>
        </div>
      </div>
    </div>

    <div id="chatContainer">
      <div id="chatHeader">
        <div id="chatUserInfo">
          <img id="chatUserAvatar" src="" alt="Avatar" />
          <div id="chatUserDetails">
            <div id="chatUserName"></div>
            <div id="chatUserStatus"></div>
          </div>
        </div>
        <div id="chatControls">
          <button class="chat-btn" id="blockUserBtn" title="حظر المستخدم">🚫</button>
          <button class="chat-btn" id="backBtn" title="رجوع">←</button>
        </div>
      </div>

      <div id="messagesArea">
        <div class="empty-state">
          <div class="icon">💬</div>
          <p>اختر محادثة لبدء الدردشة</p>
        </div>
      </div>

      <div id="typingIndicator">
        <span id="typingUser"></span> يكتب<span class="typing-dots"></span>
      </div>

      <div id="inputContainer">
        <div id="mediaButtons">
          <button class="media-btn" id="cameraBtn" title="التقاط صورة">📸</button>
          <button class="media-btn" id="galleryBtn" title="اختيار صورة">🖼️</button>
          <button class="media-btn" id="videoBtn" title="اختيار فيديو">🎥</button>
        </div>
        <textarea id="messageInput" placeholder="اكتب رسالة..." rows="1"></textarea>
        <button id="sendBtn">↑</button>
      </div>
    </div>
  </div>

  <div id="dropdownMenu">
    <button class="dropdown-item" id="editProfileBtn">
      <span>✏️ تعديل الملف الشخصي</span>
    </button>
    <button class="dropdown-item" id="blockedUsersBtn">
      <span>🚫 المستخدمين المحظورين</span>
    </button>
    <button class="dropdown-item" id="notificationSettingsBtn">
      <span>🔔 إعدادات الإشعارات</span>
    </button>
    <button class="dropdown-item" id="aboutBtn">
      <span>ℹ️ عن التطبيق</span>
    </button>
    <button class="dropdown-item danger" id="logoutBtn">
      <span>🚪 تسجيل الخروج</span>
    </button>
    <button class="dropdown-item danger" id="deleteAccountBtn">
      <span>❌ حذف الحساب</span>
    </button>
  </div>
</div>

<div id="mediaPreview">
  <div class="preview-content">
    <div id="previewMedia"></div>
    <div class="preview-controls">
      <button class="preview-btn send" id="sendMediaBtn">📤 إرسال</button>
      <button class="preview-btn" id="cancelMediaBtn">❌ إلغاء</button>
    </div>
  </div>
</div>

<div class="modal" id="editProfileModal">
  <div class="modal-content">
    <h3>✏️ تعديل الملف الشخصي</h3>
    <input type="text" id="editUsername" placeholder="👤 الاسم" />
    <input type="text" id="editStatus" placeholder="✨ الحالة" />
    <div class="modal-buttons">
      <button class="primary" id="saveProfileBtn">💾 حفظ</button>
      <button class="secondary" id="cancelProfileBtn">❌ إلغاء</button>
    </div>
  </div>
</div>

<div class="modal" id="notificationModal">
  <div class="modal-content">
    <h3>🔔 إعدادات الإشعارات</h3>
    <div style="text-align: right; margin: 20px 0;">
      <label style="display: flex; align-items: center; gap: 10px; margin: 15px 0;">
        <input type="checkbox" id="enableNotifications" checked />
        <span>تفعيل الإشعارات</span>
      </label>
      <label style="display: flex; align-items: center; gap: 10px; margin: 15px 0;">
        <input type="checkbox" id="enableSounds" checked />
        <span>تفعيل الأصوات</span>
      </label>
    </div>
    <div class="modal-buttons">
      <button class="primary" id="saveNotificationBtn">💾 حفظ</button>
      <button class="secondary" id="cancelNotificationBtn">❌ إلغاء</button>
    </div>
  </div>
</div>

<div class="modal" id="deleteMessageModal">
  <div class="modal-content">
    <h3>🗑️ حذف الرسالة</h3>
    <p style="text-align: center; margin: 20px 0;">هل تريد حذف هذه الرسالة؟</p>
    <div class="modal-buttons">
      <button class="primary" id="deleteForMeBtn">حذف لدي</button>
      <button class="primary" id="deleteForAllBtn" style="display: none;">حذف للجميع</button>
      <button class="secondary" id="cancelDeleteBtn">إلغاء</button>
    </div>
  </div>
</div>

<div class="modal" id="welcomeModal">
  <div class="modal-content">
    <div class="welcome-content">
      عزيزنا العميل / <span id="welcomeUsername"></span><br>
      نشكرك للانضمام إلى عائلة <span class="cute-chat-name">كيوت شات</span><br><br>
      نلفت انتباهكم إلى أننا نعمل جاهدين لتزويد هذا التطبيق <span class="cute-chat-name">كيوت شات</span><br>
      يعمل بدون إنترنت أو بيانات هاتف وسيكون التطبيق بإذن الله عز وجل متاحًا في أيدي الجميع، وسيتميز بإضافة الاتصالات الصوتية والاتصالات المرئية ومكالمة الفيديو المشتركة بإذن الله عز وجل.<br><br>
      تنويه هام<br>
      لن نتمكن من بلوغ الهدف بعد فضل الله علينا وفضلكم.
    </div>
    <div style="text-align: center; margin-top: 20px;">
      مع تحيات المييز سوفت للأنظمة المحاسبية المتكاملة<br>
      المدير العام / مروان محمد عبد الله الذماري
    </div>
    <div class="modal-buttons">
      <button class="primary" id="welcomeModalOkBtn">موافق</button>
    </div>
  </div>
</div>

<input type="file" id="imageInput" accept="image/*" />
<input type="file" id="videoInput" accept="video/*" />
<input type="file" id="cameraInput" accept="image/*" capture="camera" />

<audio id="notificationSound" preload="auto">
  <source src="data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmMeBC2I0fPTgjEGHm7A7+OZURE" type="audio/wav">
</audio>

<script type="module">
  import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";
  import { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, deleteUser, reauthenticateWithCredential, EmailAuthProvider, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js";
  import { getFirestore, collection, addDoc, onSnapshot, query, orderBy, serverTimestamp, getDocs, doc, setDoc, deleteDoc, where, getDoc, updateDoc, arrayUnion, increment } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";
  import { getStorage, ref, uploadBytesResumable, getDownloadURL } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-storage.js";

  const firebaseConfig = {
    apiKey: "AIzaSyAm0hh9I6i58ywW1D2gZg09liG-wG-tBsU",
    authDomain: "chat-fat-4f082.firebaseapp.com",
    projectId: "chat-fat-4f082",
    storageBucket: "chat-fat-4f082.appspot.com",
    messagingSenderId: "297367474930",
    appId: "1:297367474930:web:a05b983e05a0ba257fb66b",
    measurementId: "G-MBGC7KZ8H0"
  };

  const app = initializeApp(firebaseConfig);
  const auth = getAuth(app);
  const db = getFirestore(app);
  const storage = getStorage(app);

  // متغيرات عامة
  let currentUser = null;
  let currentChatUser = null;
  let unsubscribeMessages = null;
  let unsubscribeUsers = null;
  let unsubscribeUnreadCounts = null;
  let unreadMessageCounts = {};
  let lastMessageTimes = {};
  let usersData = {};
  let seenUsersSet = new Set();
  let isLogin = true;
  let blockedUsers = new Set();
  let onlineUsers = new Set();
  let typingUsers = new Map();
  let typingTimeout = null;
  let notificationsEnabled = localStorage.getItem('notificationsEnabled') !== 'false';
  let soundsEnabled = localStorage.getItem('soundsEnabled') !== 'false';
  let selectedMedia = null;
  let messageToDelete = null;

  // عناصر DOM
  const authContainer = document.getElementById('authContainer');
  const app_div = document.getElementById('app');
  const chatContainer = document.getElementById('chatContainer');
  const usersListContainer = document.getElementById('usersListContainer');
  const formTitle = document.getElementById('formTitle');
  const submitBtn = document.getElementById('submitBtn');
  const toggleFormBtn = document.getElementById('toggleFormBtn');
  const errorMsg = document.getElementById('errorMsg');
  const emailInput = document.getElementById('email');
  const passwordInput = document.getElementById('password');
  const usernameInput = document.getElementById('username');
  const statusInput = document.getElementById('status');
  const usersList = document.getElementById('usersList');
  const searchInput = document.getElementById('searchInput');
  const messagesArea = document.getElementById('messagesArea');
  const messageInput = document.getElementById('messageInput');
  const sendBtn = document.getElementById('sendBtn');
  const backBtn = document.getElementById('backBtn');
  const menuBtn = document.getElementById('menuBtn');
  const dropdownMenu = document.getElementById('dropdownMenu');
  const notificationSound = document.getElementById('notificationSound');
  const chatHeader = document.getElementById('chatHeader');
  const inputContainer = document.getElementById('inputContainer');
  const deleteMessageModal = document.getElementById('deleteMessageModal');
  const deleteForMeBtn = document.getElementById('deleteForMeBtn');
  const deleteForAllBtn = document.getElementById('deleteForAllBtn');
  const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');
  const editProfileModal = document.getElementById('editProfileModal');
  const editUsernameInput = document.getElementById('editUsername');
  const editStatusInput = document.getElementById('editStatus');
  const saveProfileBtn = document.getElementById('saveProfileBtn');
  const cancelProfileBtn = document.getElementById('cancelProfileBtn');
  const notificationModal = document.getElementById('notificationModal');
  const enableNotificationsCheckbox = document.getElementById('enableNotifications');
  const enableSoundsCheckbox = document.getElementById('enableSounds');
  const saveNotificationBtn = document.getElementById('saveNotificationBtn');
  const cancelNotificationBtn = document.getElementById('cancelNotificationBtn');
  const logoutBtn = document.getElementById('logoutBtn');
  const deleteAccountBtn = document.getElementById('deleteAccountBtn');
  const blockUserBtn = document.getElementById('blockUserBtn');
  const typingIndicator = document.getElementById('typingIndicator');
  const typingUserSpan = document.getElementById('typingUser');
  const chatUserAvatar = document.getElementById('chatUserAvatar');
  const chatUserName = document.getElementById('chatUserName');
  const chatUserStatus = document.getElementById('chatUserStatus');
  const userAvatarImg = document.getElementById('userAvatar');
  const currentUsernameSpan = document.getElementById('currentUsername');
  const currentUserStatusSpan = document.getElementById('currentUserStatus');
  const usersCountSpan = document.getElementById('usersCount');
  const cameraBtn = document.getElementById('cameraBtn');
  const galleryBtn = document.getElementById('galleryBtn');
  const videoBtn = document.getElementById('videoBtn');
  const imageInput = document.getElementById('imageInput');
  const videoInput = document.getElementById('videoInput');
  const cameraInput = document.getElementById('cameraInput');
  const mediaPreviewModal = document.getElementById('mediaPreview');
  const previewMediaDiv = document.getElementById('previewMedia');
  const sendMediaBtn = document.getElementById('sendMediaBtn');
  const cancelMediaBtn = document.getElementById('cancelMediaBtn');
  const welcomeModal = document.getElementById('welcomeModal');
  const welcomeUsernameSpan = document.getElementById('welcomeUsername');
  const welcomeModalOkBtn = document.getElementById('welcomeModalOkBtn');
  const blockedUsersBtn = document.getElementById('blockedUsersBtn');
  const aboutBtn = document.getElementById('aboutBtn');
  
  // دالة لإظهار النوافذ المنبثقة
  const showModal = (modal) => {
    modal.style.display = 'flex';
  };

  // دالة لإخفاء النوافذ المنبثقة
  const hideModal = (modal) => {
    modal.style.display = 'none';
  };

  // وظائف واجهة المستخدم
  // =========================================================================================

  // إظهار واجهة المصادقة وإخفاء التطبيق
  const showAuth = () => {
    authContainer.style.display = 'block';
    app_div.style.display = 'none';
  };

  // إظهار واجهة التطبيق وإخفاء المصادقة
  const showApp = () => {
    authContainer.style.display = 'none';
    app_div.style.display = 'flex';
  };

  // إظهار قائمة المستخدمين وإخفاء الدردشة (للجوال)
  const showUsersList = () => {
    usersListContainer.style.display = 'flex';
    chatContainer.style.display = 'none';
    currentChatUser = null;
    messageInput.value = '';
    messagesArea.innerHTML = `
      <div class="empty-state">
        <div class="icon">💬</div>
        <p>اختر محادثة لبدء الدردشة</p>
      </div>
    `;
    if (unsubscribeMessages) {
      unsubscribeMessages();
    }
  };

  // إظهار واجهة الدردشة وإخفاء قائمة المستخدمين (للجوال)
  const showChat = () => {
    usersListContainer.style.display = 'none';
    chatContainer.style.display = 'flex';
    messageInput.value = ''; // تأكد من مسح حقل النص عند التبديل
    messagesArea.innerHTML = '';
  };

  // تحديث واجهة المستخدم بعد تسجيل الدخول
  const updateUIOnLogin = async (user) => {
    currentUser = user;
    const userDoc = await getDoc(doc(db, 'users', user.uid));
    if (userDoc.exists()) {
      const userData = userDoc.data();
      currentUsernameSpan.textContent = userData.username;
      currentUserStatusSpan.textContent = userData.status || 'متصل الآن';
      userAvatarImg.src = userData.avatar || `https://api.dicebear.com/7.x/initials/svg?seed=${userData.username}`;
    }

    // إظهار مودال الترحيب إذا كان المستخدم جديداً
    if (!localStorage.getItem('welcomeSeen')) {
      welcomeUsernameSpan.textContent = userDoc.data()?.username || 'ضيف';
      showModal(welcomeModal);
      localStorage.setItem('welcomeSeen', 'true');
    }

    showApp();
    showUsersList();
    listenForUsers();
    listenForUnreadCounts();
    listenForBlockedUsers();
    listenForOnlineUsers();
  };

  // وظائف المصادقة
  // =========================================================================================

  // تسجيل مستخدم جديد
  const signup = async (email, password, username, status) => {
    try {
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      const user = userCredential.user;
      await setDoc(doc(db, 'users', user.uid), {
        email: email,
        username: username,
        status: status || 'متصل الآن',
        avatar: `https://api.dicebear.com/7.x/initials/svg?seed=${username}`,
        createdAt: serverTimestamp(),
        lastSeen: serverTimestamp(),
        isBlocked: []
      });
      console.log("تم إنشاء حساب جديد بنجاح!");
      errorMsg.textContent = '';
      updateUIOnLogin(user);
    } catch (error) {
      console.error("خطأ في إنشاء الحساب:", error);
      errorMsg.textContent = "خطأ: " + error.message;
    }
  };

  // تسجيل الدخول
  const login = async (email, password) => {
    try {
      const userCredential = await signInWithEmailAndPassword(auth, email, password);
      console.log("تم تسجيل الدخول بنجاح!");
      errorMsg.textContent = '';
      updateUIOnLogin(userCredential.user);
    } catch (error) {
      console.error("خطأ في تسجيل الدخول:", error);
      errorMsg.textContent = "خطأ: " + error.message;
    }
  };

  // تسجيل الخروج
  const logout = async () => {
    try {
      await updateDoc(doc(db, 'users', currentUser.uid), {
        lastSeen: serverTimestamp()
      });
      await signOut(auth);
      showAuth();
      console.log("تم تسجيل الخروج بنجاح.");
      // إلغاء كل المستمعين
      if (unsubscribeUsers) unsubscribeUsers();
      if (unsubscribeMessages) unsubscribeMessages();
      if (unsubscribeUnreadCounts) unsubscribeUnreadCounts();
    } catch (error) {
      console.error("خطأ في تسجيل الخروج:", error);
    }
  };
  
  // حذف الحساب
  const deleteAccount = async () => {
    const user = auth.currentUser;
    if (user) {
      try {
        // إعادة مصادقة المستخدم
        const credential = prompt("لإتمام عملية الحذف، يرجى إدخال كلمة المرور:");
        if (!credential) return;

        const authCredential = EmailAuthProvider.credential(user.email, credential);
        await reauthenticateWithCredential(user, authCredential);

        // حذف بيانات المستخدم من Firestore
        await deleteDoc(doc(db, 'users', user.uid));

        // حذف المستخدم نفسه
        await deleteUser(user);

        console.log("تم حذف الحساب بنجاح.");
        showAuth();
      } catch (error) {
        console.error("خطأ في حذف الحساب:", error);
        alert("خطأ في حذف الحساب: " + error.message);
      }
    }
  };

  // وظائف قاعدة البيانات (Firestore)
  // =========================================================================================

  // الاستماع لتغييرات قائمة المستخدمين
  const listenForUsers = () => {
    const usersCollectionRef = collection(db, 'users');
    unsubscribeUsers = onSnapshot(usersCollectionRef, (snapshot) => {
      snapshot.forEach(doc => {
        usersData[doc.id] = { id: doc.id, ...doc.data() };
      });
      renderUsersList();
    });
  };

  // الاستماع للرسائل في المحادثة المحددة
  const listenForMessages = (chatId) => {
    if (unsubscribeMessages) {
      unsubscribeMessages();
    }
    const messagesCollectionRef = collection(db, 'chats', chatId, 'messages');
    const q = query(messagesCollectionRef, orderBy('timestamp'));
    unsubscribeMessages = onSnapshot(q, (snapshot) => {
      messagesArea.innerHTML = '';
      snapshot.docs.forEach((doc) => {
        const message = doc.data();
        const messageId = doc.id;
        displayMessage(message, messageId);
      });
      messagesArea.scrollTop = messagesArea.scrollHeight;
      // تحديث حالة "شوهدت" للرسائل
      updateLastSeenMessage();
      resetUnreadCount(currentChatUser.id);
    });
  };

  // تحديث حالة "آخر رسالة شوهدت"
  const updateLastSeenMessage = async () => {
    if (!currentUser || !currentChatUser) return;
    const chatDocRef = doc(db, 'chats', getChatId(currentUser.uid, currentChatUser.id));
    await setDoc(chatDocRef, {
      [`lastSeen_${currentUser.uid}`]: new Date()
    }, { merge: true });
  };

  // تحديث حالة المستخدم (online/offline)
  const updateOnlineStatus = async (status) => {
    if (currentUser) {
      await updateDoc(doc(db, 'users', currentUser.uid), {
        isOnline: status
      });
    }
  };

  // تحديث حالة المستخدم في الخلفية
  document.addEventListener('visibilitychange', () => {
    if (document.visibilityState === 'hidden') {
      updateOnlineStatus(false);
    } else {
      updateOnlineStatus(true);
    }
  });

  // الاستماع لحالة المستخدمين (online/offline)
  const listenForOnlineUsers = () => {
    const usersCollectionRef = collection(db, 'users');
    onSnapshot(usersCollectionRef, (snapshot) => {
      onlineUsers.clear();
      snapshot.docs.forEach(doc => {
        const userData = doc.data();
        if (userData.isOnline) {
          onlineUsers.add(doc.id);
        }
      });
      renderUsersList();
    });
  };
  
  // الاستماع لعدادات الرسائل غير المقروءة
  const listenForUnreadCounts = () => {
    if (!currentUser) return;
    const unreadCountsRef = collection(db, 'users', currentUser.uid, 'unreadCounts');
    unsubscribeUnreadCounts = onSnapshot(unreadCountsRef, (snapshot) => {
      snapshot.forEach(doc => {
        unreadMessageCounts[doc.id] = doc.data().count;
      });
      renderUsersList();
    });
  };
  
  // زيادة عداد الرسائل غير المقروءة
  const incrementUnreadCount = async (receiverId, senderId) => {
      const unreadCountDocRef = doc(db, 'users', receiverId, 'unreadCounts', senderId);
      await setDoc(unreadCountDocRef, { count: increment(1) }, { merge: true });
  };

  // تصفير عداد الرسائل غير المقروءة
  const resetUnreadCount = async (senderId) => {
      if (!currentUser) return;
      const unreadCountDocRef = doc(db, 'users', currentUser.uid, 'unreadCounts', senderId);
      await setDoc(unreadCountDocRef, { count: 0 }, { merge: true });
  };

  // وظائف واجهة المستخدم (عرض البيانات)
  // =========================================================================================

  // إنشاء بطاقة المستخدم
  const createUserCard = (user) => {
    const userCard = document.createElement('div');
    userCard.className = `user-card ${currentChatUser && currentChatUser.id === user.id ? 'active' : ''}`;
    userCard.dataset.id = user.id;

    const isOnline = onlineUsers.has(user.id);
    const isNewUser = user.createdAt && (new Date() - new Date(user.createdAt.seconds * 1000)) < 24 * 60 * 60 * 1000;
    const isMe = user.id === currentUser.uid;
    const unreadCount = unreadMessageCounts[user.id] || 0;

    userCard.innerHTML = `
      <div class="user-avatar-container">
        <img class="user-avatar" src="${user.avatar || `https://api.dicebear.com/7.x/initials/svg?seed=${user.username}`}" alt="Avatar">
        <div class="online-indicator ${isOnline ? 'online' : ''}"></div>
      </div>
      <div class="user-info">
        <h4>
          ${user.username}
          ${isNewUser && !isMe ? `<span class="new-user-badge">جديد</span>` : ''}
        </h4>
        <div class="user-status">${user.status || ''}</div>
      </div>
      <div class="unread-count ${unreadCount > 0 ? 'show' : ''}">${unreadCount > 99 ? '99+' : unreadCount}</div>
    `;

    userCard.addEventListener('click', () => {
      if (blockedUsers.has(user.id)) {
        alert("لا يمكنك الدردشة مع مستخدم محظور.");
        return;
      }
      currentChatUser = user;
      updateChatHeader();
      showChat();
      loadMessages();
      renderUsersList();
    });

    return userCard;
  };

  // عرض قائمة المستخدمين
  const renderUsersList = () => {
    usersList.innerHTML = '';
    const sortedUsers = Object.values(usersData).filter(user => user.id !== currentUser.uid).sort((a, b) => {
        const aLastMessageTime = lastMessageTimes[a.id] || 0;
        const bLastMessageTime = lastMessageTimes[b.id] || 0;
        return bLastMessageTime - aLastMessageTime;
    });

    sortedUsers.forEach(user => {
        usersList.appendChild(createUserCard(user));
    });

    usersCountSpan.textContent = `(${Object.keys(usersData).length - 1} مستخدم)`;
  };

  // تحديث رأس المحادثة
  const updateChatHeader = () => {
    if (currentChatUser) {
      chatUserAvatar.src = currentChatUser.avatar || `https://api.dicebear.com/7.x/initials/svg?seed=${currentChatUser.username}`;
      chatUserName.textContent = currentChatUser.username;
      chatUserStatus.textContent = onlineUsers.has(currentChatUser.id) ? 'متصل الآن' : 'غير متصل';
      blockUserBtn.textContent = blockedUsers.has(currentChatUser.id) ? 'إلغاء الحظر' : '🚫 حظر';
    }
  };
  
  // عرض الرسالة
  const displayMessage = (message, messageId) => {
    if (message.deletedFor && message.deletedFor.includes(currentUser.uid)) {
      return;
    }

    const messageWrapper = document.createElement('div');
    messageWrapper.className = `message-wrapper ${message.senderId === currentUser.uid ? 'sent' : 'received'}`;
    messageWrapper.dataset.messageId = messageId;
    messageWrapper.dataset.senderId = message.senderId;

    const messageDiv = document.createElement('div');
    messageDiv.className = 'message';

    let contentHTML = '';
    if (message.type === 'text') {
        contentHTML = `<div class="message-content">${message.text}</div>`;
    } else if (message.type === 'image') {
        contentHTML = `<div class="message-media"><img src="${message.mediaUrl}" alt="صورة"></div>`;
    } else if (message.type === 'video') {
        contentHTML = `<div class="message-media"><video src="${message.mediaUrl}" controls></video></div>`;
    }
    
    messageDiv.innerHTML = `
      ${contentHTML}
      <div class="message-time">${formatTimestamp(message.timestamp)}</div>
    `;

    messageWrapper.appendChild(messageDiv);
    messagesArea.appendChild(messageWrapper);
    messagesArea.scrollTop = messagesArea.scrollHeight;
  };
  
  // دالة لتحميل الرسائل
  const loadMessages = async () => {
    if (!currentChatUser) {
      messagesArea.innerHTML = `
        <div class="empty-state">
          <div class="icon">💬</div>
          <p>اختر محادثة لبدء الدردشة</p>
        </div>
      `;
      return;
    }
    const chatId = getChatId(currentUser.uid, currentChatUser.id);
    messagesArea.innerHTML = '';
    listenForMessages(chatId);
  };

  // وظائف إرسال واستقبال الرسائل
  // =========================================================================================

  // إرسال رسالة
  const sendMessage = async (messageText, mediaUrl = null, type = 'text') => {
    if (!currentChatUser) return;
    const chatId = getChatId(currentUser.uid, currentChatUser.id);
    const message = {
      senderId: currentUser.uid,
      receiverId: currentChatUser.id,
      text: messageText,
      timestamp: serverTimestamp(),
      type: type,
      mediaUrl: mediaUrl,
      deletedFor: []
    };
    try {
      await addDoc(collection(db, 'chats', chatId, 'messages'), message);
      messageInput.value = '';
      messagesArea.scrollTop = messagesArea.scrollHeight;
      // زيادة عداد الرسائل غير المقروءة للمستلم
      incrementUnreadCount(currentChatUser.id, currentUser.uid);
    } catch (error) {
      console.error("خطأ في إرسال الرسالة:", error);
    }
  };

  // رفع الوسائط
  const uploadMedia = async (file) => {
      const mediaRef = ref(storage, `chat_media/${file.name}_${new Date().getTime()}`);
      const uploadTask = uploadBytesResumable(mediaRef, file);

      uploadTask.on('state_changed',
          (snapshot) => {
              const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
              console.log('Upload is ' + progress + '% done');
          },
          (error) => {
              console.error("Upload failed", error);
              alert("فشل رفع الملف!");
          },
          () => {
              getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {
                  console.log('File available at', downloadURL);
                  sendMessage('تم إرسال ملف وسائط', downloadURL, file.type.startsWith('image') ? 'image' : 'video');
              });
          }
      );
  };

  // وظائف مساعدة
  // =========================================================================================
  
  // توليد هوية الدردشة
  const getChatId = (uid1, uid2) => {
    return uid1 < uid2 ? uid1 + '_' + uid2 : uid2 + '_' + uid1;
  };
  
  // تنسيق الوقت
  const formatTimestamp = (timestamp) => {
    if (!timestamp) return '';
    const date = timestamp.toDate();
    return date.toLocaleTimeString('ar-EG', { hour: '2-digit', minute: '2-digit' });
  };
  
  // التعامل مع المستخدمين المحظورين
  const listenForBlockedUsers = () => {
    if (!currentUser) return;
    const userDocRef = doc(db, 'users', currentUser.uid);
    onSnapshot(userDocRef, (doc) => {
      if (doc.exists()) {
        blockedUsers = new Set(doc.data().isBlocked || []);
        renderUsersList();
      }
    });
  };

  // حظر المستخدم
  const toggleBlockUser = async () => {
    if (!currentUser || !currentChatUser) return;
    const userDocRef = doc(db, 'users', currentUser.uid);
    if (blockedUsers.has(currentChatUser.id)) {
      // إلغاء الحظر
      const newBlockedList = Array.from(blockedUsers).filter(id => id !== currentChatUser.id);
      await updateDoc(userDocRef, { isBlocked: newBlockedList });
    } else {
      // حظر
      await updateDoc(userDocRef, { isBlocked: arrayUnion(currentChatUser.id) });
    }
  };

  // تحديث حالة الكتابة
  const updateTypingStatus = async (isTyping) => {
    if (!currentUser || !currentChatUser) return;
    const chatId = getChatId(currentUser.uid, currentChatUser.id);
    const typingDocRef = doc(db, 'chats', chatId, 'typing', currentUser.uid);
    if (isTyping) {
      await setDoc(typingDocRef, { isTyping: true, username: usersData[currentUser.uid].username });
      if (typingTimeout) clearTimeout(typingTimeout);
      typingTimeout = setTimeout(async () => {
        await setDoc(typingDocRef, { isTyping: false });
      }, 3000); // إيقاف حالة الكتابة بعد 3 ثوانٍ من التوقف
    } else {
      await setDoc(typingDocRef, { isTyping: false });
    }
  };

  // الاستماع لحالة الكتابة
  const listenForTypingStatus = () => {
    if (!currentUser || !currentChatUser) return;
    const chatId = getChatId(currentUser.uid, currentChatUser.id);
    const typingCollectionRef = collection(db, 'chats', chatId, 'typing');
    onSnapshot(typingCollectionRef, (snapshot) => {
      typingUsers.clear();
      snapshot.docs.forEach(doc => {
        const typingData = doc.data();
        if (typingData.isTyping && doc.id !== currentUser.uid) {
          typingUsers.set(doc.id, typingData.username);
        }
      });
      renderTypingIndicator();
    });
  };

  // عرض مؤشر الكتابة
  const renderTypingIndicator = () => {
    const typingUserNames = Array.from(typingUsers.values());
    if (typingUserNames.length > 0) {
      typingUserSpan.textContent = typingUserNames.join(', ');
      typingIndicator.style.display = 'block';
    } else {
      typingIndicator.style.display = 'none';
    }
  };

  // وظائف الأحداث
  // =========================================================================================

  // حالة المصادقة
  onAuthStateChanged(auth, (user) => {
    if (user) {
      updateUIOnLogin(user);
    } else {
      showAuth();
    }
  });

  // حدث زر المصادقة
  submitBtn.addEventListener('click', () => {
    const email = emailInput.value;
    const password = passwordInput.value;
    const username = usernameInput.value;
    const status = statusInput.value;

    if (isLogin) {
      login(email, password);
    } else {
      if (username) {
        signup(email, password, username, status);
      } else {
        errorMsg.textContent = "الاسم مطلوب لإنشاء حساب.";
      }
    }
  });

  // تبديل بين تسجيل الدخول وإنشاء حساب
  toggleFormBtn.addEventListener('click', () => {
    isLogin = !isLogin;
    if (isLogin) {
      formTitle.textContent = "💬 تسجيل الدخول";
      submitBtn.textContent = "تسجيل الدخول";
      toggleFormBtn.textContent = "إنشاء حساب جديد";
      usernameInput.style.display = 'none';
      statusInput.style.display = 'none';
    } else {
      formTitle.textContent = "💬 إنشاء حساب جديد";
      submitBtn.textContent = "إنشاء حساب";
      toggleFormBtn.textContent = "لديك حساب بالفعل؟";
      usernameInput.style.display = 'block';
      statusInput.style.display = 'block';
    }
    errorMsg.textContent = '';
  });
  
  // إرسال الرسالة
  sendBtn.addEventListener('click', () => {
    if (messageInput.value.trim() !== '') {
      sendMessage(messageInput.value);
    }
  });
  
  // إرسال الرسالة عند الضغط على Enter
  messageInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendBtn.click();
    }
  });
  
  // تحديث حالة الكتابة عند الكتابة في حقل الرسائل
  messageInput.addEventListener('input', () => {
    updateTypingStatus(messageInput.value.trim().length > 0);
  });

  // الرجوع من المحادثة
  backBtn.addEventListener('click', showUsersList);

  // إظهار وإخفاء قائمة الإعدادات
  menuBtn.addEventListener('click', () => {
    dropdownMenu.style.display = dropdownMenu.style.display === 'flex' ? 'none' : 'flex';
  });

  // إخفاء القائمة عند النقر خارجها
  document.addEventListener('click', (e) => {
    if (!menuBtn.contains(e.target) && !dropdownMenu.contains(e.target)) {
      dropdownMenu.style.display = 'none';
    }
  });

  // تسجيل الخروج
  logoutBtn.addEventListener('click', logout);

  // حذف الحساب
  deleteAccountBtn.addEventListener('click', deleteAccount);

  // حظر المستخدم
  blockUserBtn.addEventListener('click', toggleBlockUser);
  
  // فتح مودال تعديل الملف الشخصي
  editProfileBtn.addEventListener('click', () => {
    hideModal(dropdownMenu);
    editUsernameInput.value = currentUsernameSpan.textContent;
    editStatusInput.value = currentUserStatusSpan.textContent;
    showModal(editProfileModal);
  });

  // حفظ تعديل الملف الشخصي
  saveProfileBtn.addEventListener('click', async () => {
    const newUsername = editUsernameInput.value.trim();
    const newStatus = editStatusInput.value.trim();
    if (newUsername) {
      await updateDoc(doc(db, 'users', currentUser.uid), {
        username: newUsername,
        status: newStatus,
        avatar: `https://api.dicebear.com/7.x/initials/svg?seed=${newUsername}`
      });
      currentUsernameSpan.textContent = newUsername;
      currentUserStatusSpan.textContent = newStatus;
      userAvatarImg.src = `https://api.dicebear.com/7.x/initials/svg?seed=${newUsername}`;
      hideModal(editProfileModal);
      alert("تم حفظ التعديلات بنجاح!");
    }
  });

  // إلغاء تعديل الملف الشخصي
  cancelProfileBtn.addEventListener('click', () => hideModal(editProfileModal));

  // فتح مودال إعدادات الإشعارات
  notificationSettingsBtn.addEventListener('click', () => {
    hideModal(dropdownMenu);
    enableNotificationsCheckbox.checked = notificationsEnabled;
    enableSoundsCheckbox.checked = soundsEnabled;
    showModal(notificationModal);
  });
  
  // حفظ إعدادات الإشعارات
  saveNotificationBtn.addEventListener('click', () => {
    notificationsEnabled = enableNotificationsCheckbox.checked;
    soundsEnabled = enableSoundsCheckbox.checked;
    localStorage.setItem('notificationsEnabled', notificationsEnabled);
    localStorage.setItem('soundsEnabled', soundsEnabled);
    hideModal(notificationModal);
    alert("تم حفظ إعدادات الإشعارات بنجاح!");
  });

  // إلغاء إعدادات الإشعارات
  cancelNotificationBtn.addEventListener('click', () => hideModal(notificationModal));
  
  // عند النقر على رسالة لحذفها
  messagesArea.addEventListener('click', (e) => {
    const messageWrapper = e.target.closest('.message-wrapper');
    if (messageWrapper) {
      messageToDelete = {
        id: messageWrapper.dataset.messageId,
        senderId: messageWrapper.dataset.senderId
      };
      // عرض خيار الحذف للجميع إذا كانت رسالتك
      if (messageToDelete.senderId === currentUser.uid) {
        deleteForAllBtn.style.display = 'inline-block';
      } else {
        deleteForAllBtn.style.display = 'none';
      }
      showModal(deleteMessageModal);
    }
  });

  // حذف الرسالة لدي فقط
  deleteForMeBtn.addEventListener('click', async () => {
    if (!messageToDelete) return;
    const chatId = getChatId(currentUser.uid, currentChatUser.id);
    const messageDocRef = doc(db, 'chats', chatId, 'messages', messageToDelete.id);
    await updateDoc(messageDocRef, {
      deletedFor: arrayUnion(currentUser.uid)
    });
    hideModal(deleteMessageModal);
  });
  
  // حذف الرسالة للجميع
  deleteForAllBtn.addEventListener('click', async () => {
    if (!messageToDelete) return;
    const chatId = getChatId(currentUser.uid, currentChatUser.id);
    const messageDocRef = doc(db, 'chats', chatId, 'messages', messageToDelete.id);
    await deleteDoc(messageDocRef);
    hideModal(deleteMessageModal);
  });

  // إلغاء الحذف
  cancelDeleteBtn.addEventListener('click', () => hideModal(deleteMessageModal));

  // وظائف رفع الوسائط
  // =========================================================================================

  cameraBtn.addEventListener('click', () => cameraInput.click());
  galleryBtn.addEventListener('click', () => imageInput.click());
  videoBtn.addEventListener('click', () => videoInput.click());
  
  imageInput.addEventListener('change', (e) => {
    const file = e.target.files[0];
    if (file) {
      selectedMedia = file;
      showMediaPreview(URL.createObjectURL(file), 'image');
    }
  });

  videoInput.addEventListener('change', (e) => {
    const file = e.target.files[0];
    if (file) {
      selectedMedia = file;
      showMediaPreview(URL.createObjectURL(file), 'video');
    }
  });

  cameraInput.addEventListener('change', (e) => {
    const file = e.target.files[0];
    if (file) {
      selectedMedia = file;
      showMediaPreview(URL.createObjectURL(file), 'image');
    }
  });
  
  const showMediaPreview = (url, type) => {
    previewMediaDiv.innerHTML = '';
    if (type === 'image') {
      const img = document.createElement('img');
      img.src = url;
      previewMediaDiv.appendChild(img);
    } else if (type === 'video') {
      const video = document.createElement('video');
      video.src = url;
      video.controls = true;
      previewMediaDiv.appendChild(video);
    }
    showModal(mediaPreviewModal);
  };
  
  sendMediaBtn.addEventListener('click', () => {
    if (selectedMedia) {
      uploadMedia(selectedMedia);
      selectedMedia = null;
      hideModal(mediaPreviewModal);
    }
  });
  
  cancelMediaBtn.addEventListener('click', () => {
    selectedMedia = null;
    hideModal(mediaPreviewModal);
  });
  
  // موافق على شاشة الترحيب
  welcomeModalOkBtn.addEventListener('click', () => hideModal(welcomeModal));
</script>

</body>
</html>
